@using BlazorShared.Models
@using Microsoft.AspNetCore.Components.Forms

<MudGrid>
   <MudItem xs="6">
        @if(AnswerType is ShortTextDto answerType)
        {
          
            <MudTextField T="string" Label="" @bind-Value="@QuestionResponse.Answer" Margin="Margin.Dense" Variant="Variant.Text" />
      
        }

    @if (AnswerType is MultipleChoiceDto multipleChoiceAnswerType && QuestionResponse is QuestionResponseMultipleChoiceDto multiChoiceAnswer)
    {
   
            <MudSelect T="string" Label="@Question" MultiSelection="true" AnchorOrigin="Origin.BottomCenter" @bind-bind-Value="@multiChoiceAnswer.Answers">
                @foreach (var item in multipleChoiceAnswerType.Choices)
                    {
                        <MudSelectItem Value="@item.Key" />
                    }
                </MudSelect>
  
    }

    @if (AnswerType is YesNoAnswerDto yesNoAnswerType && QuestionResponse is QuestionResponseYesNoDto yesNoAnswer)
        {
        
                    <MudField Label="@Question" Variant="Variant.Text" InnerPadding = "false" DisableUnderLine = "true">
                        <MudRadioGroup T="YesNoEnum" @bind-SelectedOption="@yesNoAnswer.Answer" @onchange="OnChange">
                            <MudRadio Option="YesNoEnum.Yes" Color="Color.Primary">Yes </MudRadio>
                             <MudRadio Option="YesNoEnum.No" Color="Color.Primary">No</MudRadio>
                        </MudRadioGroup>
                    </MudField>
        
        }

    @if (AnswerType is EvaluationDto criteriaAnswerType && QuestionResponse is QuestionResponseEvaluationDto criteriaAnswer)
        {
        
                  <MudSelect T="Assessment" Label="@Question" AnchorOrigin="Origin.BottomCenter" @bind-Value="@criteriaAnswer.SelfAssessment">
                      <MudSelectItem T="Assessment"  Value="Assessment.NotApplicable"/>
                      <MudSelectItem T="Assessment"  Value="Assessment.DoNotComply"/>
                      <MudSelectItem T="Assessment"  Value="Assessment.PartiallyComply"/>
                      <MudSelectItem T="Assessment"  Value="Assessment.FullyComply"/>
                </MudSelect>
      
        }

    @if(AnswerType.AllowAttachment)
        {
            <MudFileUpload T="IReadOnlyList<IBrowserFile>" FilesChanged="UploadFiles">
                <ButtonTemplate>
                    <MudButton HtmlTag="label"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.CloudUpload"
                               for="@context.Id">
                        Multiple Files
                    </MudButton>
                </ButtonTemplate>
            </MudFileUpload>

        }

    </MudItem>
    <MudItem xs="6">
        <MudTextField T="string" Label="Notes/Comments" Variant="Variant.Outlined" @bind-Value="@QuestionResponse.AnswerMotivation" Lines="2" Margin="Margin.Dense" />
    </MudItem>

@*  <MudItem xs="12">
        <MudTextField T="string" Label="Notes" Variant="Variant.Outlined" @bind-Value="@QuestionResponse.AnswerMotivation" Lines="1" />
 </MudItem> *@
 </MudGrid>
 @*<MudDivider DividerType="DividerType.Middle" Class="my-1"/>*@
@code {

    [Parameter]
    public string Question { get; set; }

    [Parameter]
    public AnswerFormatDto AnswerType { get; set; }

    [Parameter]
    public QuestionResponseDto QuestionResponse { get; set; }

    IList<IBrowserFile> files = new List<IBrowserFile>();

     [Parameter] public EventCallback<object> ValueChanged { get; set; }

        async void OnChange(ChangeEventArgs e)
    {
       await ValueChanged.InvokeAsync(e.Value);
    }


    private void UploadFiles(IReadOnlyList<IBrowserFile> files)
    {
        foreach (var file in files)
        {
            this.files.Add(file);
        }
        //TODO upload the files to the server
    }




}
