@using BlazorShared.Models

<MudGrid>
  
        @if(AnswerType is ShortText singleAnswer)
        {
           <MudItem xs="12">
                <MudTextField T="string" Label=""  @bind-Value="@singleAnswer.Answer" @onchange="OnChange" Margin="Margin.Dense"/>
           </MudItem>
        }

    @if (AnswerType is MultipleChoice multipleChoiceAnswer)
    {
        <MudItem xs="3">
                <MudSelect T="string" Label="@Question" AnchorOrigin="Origin.BottomCenter" @bind-Text="@multipleChoiceAnswer.Answer" @bind-Value="@multipleChoiceAnswer.Answer">
                    @foreach (var item in multipleChoiceAnswer.Choices)
                    {
                        <MudSelectItem Value="@item.Key" />
                    }
                </MudSelect>
         </MudItem>
    }

           @if(AnswerType is YesNoAnswer yesNoAnswer)
        {
            <MudItem xs="3">
                    <MudField Label="@Question" Variant="Variant.Text" InnerPadding = "false" DisableUnderLine = "true">
                        <MudRadioGroup T="YesNoEnum" @bind-SelectedOption="@yesNoAnswer.Answer" @onchange="OnChange">
                            <MudRadio Option="YesNoEnum.Yes" Color="Color.Primary">Yes </MudRadio>
                             <MudRadio Option="YesNoEnum.No" Color="Color.Primary">No</MudRadio>
                        </MudRadioGroup>
                    </MudField>
            </MudItem>
        }

<MudItem xs="2">




        @if(AnswerType is Criteria criteriaAnswer)
        {
@*            <MudField Label="@Question" Variant="Variant.Text" InnerPadding = "false" DisableUnderLine = "true">
                <MudRadioGroup T="Assessment" @bind-SelectedOption="@criteriaAnswer.SelfAssessment" @onchange="OnChange">
                    <MudRadio Option="Assessment.NotApplicable" Color="Color.Primary">NotApplicable </MudRadio>
                    <MudRadio Option="Assessment.DoNotComply" Color="Color.Primary">DoNotComply </MudRadio>
                    <MudRadio Option="Assessment.PartiallyComply" Color="Color.Primary">PartiallyComply </MudRadio>
                    <MudRadio Option="Assessment.FullyComply" Color="Color.Primary">FullyComply </MudRadio>
                </MudRadioGroup>
            </MudField>*@

              <MudSelect T="Assessment" Label="@Question" AnchorOrigin="Origin.BottomCenter"   @bind-Value="@criteriaAnswer.SelfAssessment">
                  <MudSelectItem T="Assessment"  Value="Assessment.NotApplicable"/>
                  <MudSelectItem T="Assessment"  Value="Assessment.DoNotComply"/>
                  <MudSelectItem T="Assessment"  Value="Assessment.PartiallyComply"/>
                  <MudSelectItem T="Assessment"  Value="Assessment.FullyComply"/>
@*                @foreach (var item in Enum.GetValues(typeof(Assessment)))
                {
                    <MudSelectItem T="Assessment"  Value="Assessment.NotApplicable"/>
                }*@
            </MudSelect>
        }








 </MudItem>
 <MudItem xs="10">
     <MudTextField T="string" Label="Answer/Notes" Variant="Variant.Outlined" @bind-Value="@AnswerType.AnswerMotivation" Lines="1" />
 </MudItem>
 </MudGrid>
 @*<MudDivider DividerType="DividerType.Middle" Class="my-1"/>*@
@code {

    [Parameter]
    public string Question { get; set; }

    [Parameter]
    public AnswerFormat AnswerType { get; set; }



     [Parameter] public EventCallback<object> ValueChanged { get; set; }

        async void OnChange(ChangeEventArgs e)
    {
       await ValueChanged.InvokeAsync(e.Value);
    }




}
