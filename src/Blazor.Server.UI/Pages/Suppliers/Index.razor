@page "/suppliers/index"

@using BlazorShared.Models
@using BlazorShared.Services
@using FluentEmail.Core
@using FluentEmail.Core.Models;
@using FluentEmail.Razor
@using HashidsNet
@using System.Globalization
@inject ISupplierService _supplierService




@inject IJSRuntime JS
@inject IStringLocalizer<Index> L
@attribute [Authorize(Policy = Permissions.Products.View)]
<PageTitle>@Title</PageTitle>
<style>
    .mud-table-toolbar {
        height: 84px !important;
    }
</style>
<MudTable ServerData="@(new Func<TableState, Task<TableData<SupplierDto>>>(ServerReload))"
                  FixedHeader="true"
                  FixedFooter="true"
                  Virtualize="true"
                  Height="calc(100vh - 315px)"
                  Loading="@_loading"
                  SortLabel="@L["Sort By"]"
                  MultiSelection="true" @bind-SelectedItems="_selectedItems"
                  Hover="true" @ref="_table">

                <ToolBarContent>
                <div class="justify-start pt-3">
                    <MudText Typo="Typo.h6">@L["Suppliers"]</MudText>
                    <MudHidden Breakpoint="Breakpoint.SmAndDown">
                        <MudButton DisableElevation Variant="Variant.Outlined"
                                   Size="Size.Small"
                                   Disabled="@_loading"
                                   OnClick="@(()=> OnRefresh())"
                                   StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Primary"
                                   Style="margin-right: 4px; margin-bottom:4px">@L["Refresh"]</MudButton>
                        @if (_canRequest)
                        {
                            

                            <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.PostAdd"
                                   Disabled="_loading"
                                   Size="Size.Small"
                                   OnClick="@(()=>_navigationManager.NavigateTo("/suppliers/addedit"))"
                                   Style="margin-right: 4px; margin-bottom:4px"
                                   IconColor="Color.Surface">@L["New Supplier"]</MudButton>

                            <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.PostAdd"
                                   Disabled="_loading"
                                   Size="Size.Small"
                                   OnClick="@(()=>_navigationManager.NavigateTo("/suppliers/onboarding"))"
                                   Style="margin-right: 4px; margin-bottom:4px"
                                   IconColor="Color.Surface">@L["New Supplier"]
                             </MudButton>

                                                         <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.PostAdd"
                                   Disabled="_loading"
                                   Size="Size.Small"
                                   OnClick="@(()=>_navigationManager.NavigateTo("/questionaire/test/true"))"
                                   Style="margin-right: 4px; margin-bottom:4px"
                                   IconColor="Color.Surface">@L["Questionaire"]
                             </MudButton>


                        }



                    </MudHidden>
                </div>
                <MudSpacer />
                <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Value="@_searchString" Placeholder="Search" Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
 
            <HeaderContent>
                <MudTh>@PromptText.ACTIONS</MudTh>
                <MudTh>@L["Id"]</MudTh>
                <MudTh>@L["Name"]</MudTh>
                <MudTh>@L["Category"]</MudTh>
                <MudTh>@L["Segment"]</MudTh>
                 <MudTh>@L["Status"]</MudTh>
                <MudTh>@L["Risk"]</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="@L["Actions"]">

                    <MudIconButton Icon="fa-solid fa-eye" Color="Color.Error" OnClick="@(()=>OnView(context))"></MudIconButton>
                  
                </MudTd>
                <MudTd DataLabel="@ButtonText.ACTIONS">
                    @if (_canEdit || _canDelete || _canApprove)
                    {
                        <MudMenu Label="@ButtonText.ACTIONS" Variant="Variant.Filled" DisableElevation="true" Size="Size.Small"
                             Dense="true"
                             EndIcon="@Icons.Filled.KeyboardArrowDown" IconColor="Color.Info" Direction="Direction.Left"
                             OffsetX="true">
                            @if (_canEdit)
                            {
                                <MudMenuItem OnClick="@(()=>OnView(context))">@ButtonText.EDIT</MudMenuItem>
                            }
                            @if (_canDelete)
                            {
                                <MudMenuItem OnClick="@(()=>OnView(context))">@ButtonText.DELETE</MudMenuItem>
                            }
                             @if (_canApprove)
                            {
                                <MudMenuItem OnClick="@(()=>OnInvite(context))">Submit Registration Form</MudMenuItem>
                                 <MudMenuItem OnClick="@(()=>OnView(context))">Approve</MudMenuItem>
                            }
                        </MudMenu>
                    }
                    else
                    {
                           <MudIconButton Icon="fa-solid fa-eye" Color="Color.Error" OnClick="@(()=>OnView(context))"></MudIconButton>
                    }
                    
                </MudTd>
                <MudTd DataLabel="@L["Id"]">
                    <MudText>@context.Id</MudText>
                </MudTd>
                <MudTd DataLabel="@L["Name"]">
                    <MudText>@context.Name</MudText>      
                </MudTd>
                <MudTd DataLabel="@L["Category"]">
                    <MudText>@context.Category</MudText>          
                </MudTd>
                <MudTd DataLabel="@L["Segment"]">
                    <MudText>@context.RiskRating</MudText>
                </MudTd>
                <MudTd DataLabel="@L["Status"]">
                    <MudText>@context.RiskRating</MudText>
                </MudTd>
                <MudTd DataLabel="@L["Risk"]">
                    <MudText>@context.RiskRating</MudText>
                </MudTd>
            </RowTemplate>
            <NoRecordsContent>
                <MudText>@L["No matching records found"]</MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>@L["Loading..."].</MudText>
            </LoadingContent>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
@code {
    public string? Title { get; private set; }
    private HashSet<SupplierDto> _selectedItems = new HashSet<SupplierDto>();
    private MudTable<SupplierDto> _table = default!;
    private int _totalItems;
    private string _searchString = string.Empty;
    private bool _loading;
    private bool _uploading;
    private bool _downloading;


    [Inject]
    private Hashids hashids { get; set; } = default!;
    [Inject]
    private NavigationManager _navigationManager { get; set; } = default!;
    [Inject]
    private IFluentEmail _fluentEmail { get; set; }

    [CascadingParameter]
    protected Task<AuthenticationState> AuthState { get; set; } = default!;



    private bool _canSearch;
    private bool _canCreate;
    private bool _canEdit;
    private bool _canDelete;
    private bool _canApprove;
    private bool _canImport;
    private bool _canExport;
    private bool _canRequest;
    protected override async Task OnInitializedAsync()
    {
        Title = L["Visitors"];
        var state = await AuthState;
        _canCreate = (await AuthService.AuthorizeAsync(state.User, Permissions.Customers.Create)).Succeeded;
        _canSearch = (await AuthService.AuthorizeAsync(state.User, Permissions.Customers.Search)).Succeeded;
        _canEdit = (await AuthService.AuthorizeAsync(state.User, Permissions.Customers.Edit)).Succeeded;
        _canDelete = (await AuthService.AuthorizeAsync(state.User, Permissions.Customers.Delete)).Succeeded;
        _canApprove = (await AuthService.AuthorizeAsync(state.User, Permissions.Customers.View)).Succeeded;
        _canRequest = (await AuthService.AuthorizeAsync(state.User, Permissions.Customers.View)).Succeeded;
        _canImport = false;
        _canExport = false;

    }
    private async Task<TableData<SupplierDto>> ServerReload(TableState state)
    {
        var suppliers = await _supplierService.SearchSuppliers(new SupplierSearchRequest() { });
        return new TableData<SupplierDto>() {TotalItems = 1, Items = suppliers};
        //var result = new TableData<PersonIdentification>() { Items = personIdentifications, TotalItems = 10 };
        //return Task.FromResult<TableData<PersonIdentification>>(result);


    }

    private void OnFilterChanged(string s)
    {
        InvokeAsync(async () =>
        {
            await _table.ReloadServerData();
        });
    }
    private async Task OnRequest()
    {
        _navigationManager.NavigateTo($"/suppliers/add");
        //var model = new PersonIdentificationRequest();
        //var parameters = new DialogParameters { ["model"] = new SupplierCreateRequest() };
        //var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true,Position = DialogPosition.Center };
        //var dialog = DialogService.Show<_SupplierRequestFormDialog>(L["Create a new supplier"], parameters, options);
        //var result = await dialog.Result;
        //var supplierRequest = (Supplier)result.Data;
        //if (!result.Cancelled)
        //{
        //    Snackbar.Add($" Created {supplierRequest.Name}", MudBlazor.Severity.Info);

        //    //_navigationManager.NavigateTo($"/suppliers/{(supplierRequest.Id}");
        //}
        //else
        //{
        //    Snackbar.Add($"{L["Failed"]}", MudBlazor.Severity.Info);
        //}


    }

    private async Task OnView(SupplierDto supplier)
    {
        if (supplier != null)
        {
            _navigationManager.NavigateTo($"/supplier/add/edit/{supplier.Id}");
        }
    }
    private async Task OnInvite(SupplierDto supplier)
    {
        if (supplier != null)
        {
            foreach (var contact in supplier.Contacts)
            {
                sendInvite(contact.EmailAddress, contact.FullName, supplier.Id.ToString(), contact.Id.ToString());
            }
        }
    }

    private Task<SendResponse> sendInvite(string toemail, string userName, string supplierId, string contactId)
    {

        var subject = string.Format(L["Welcome to {0}"], Settings.AppName);
        var template = Path.Combine(Directory.GetCurrentDirectory(), "Resources", "EmailTemplates", "_registrationInvite.txt");
        return _fluentEmail.To(toemail).Subject(subject).UsingTemplateFromFile(template, new { AppName = Settings.AppName, Email = toemail, UserName = userName, SupplierId = supplierId,ContactId = contactId  }, true).SendAsync();
    }

    private async Task OnSearch(string text)
    {
        _selectedItems = new();
        _searchString = text;
        await _table.ReloadServerData();
    }
    private async Task OnRefresh()
    {
        _selectedItems = new();
        _searchString = string.Empty;
        await _table.ReloadServerData();
    }



    }
