@page "/supplier/addedit/{supplierId:guid?}"


@using BlazorShared.Models
@using BlazorShared.Services
@inject NavigationManager NavigationManager

@inject ISupplierService _supplierService

<h1> @model.Name</h1>
<h7> Supplier Id: @model.Id</h7><MudChip Color="Color.Success">@model.Status</MudChip>

<MudGrid>

       <MudItem xs="12">
           <MudText Typo="Typo.h6">Internal Information</MudText>
            <MudTextField @bind-Value="model.RiskRating" For="@(() => model.RiskRating)" T="string" Label="Category" Required="true" />

       </MudItem>

    

        <MudItem xs="6">
            <MudPaper Class="mud-width-full py-8 pa-4">
                <h3>Supplier Information</h3>
                <MudTextField @bind-Value="model.Name"  For="@(() => model.Name)" T="string" Label="Name" Required="true" RequiredError="Supplier name is required!"/>
                <MudTextField @bind-Value="model.TaxReferenceNumber" For="@(() => model.TaxReferenceNumber)" T="string" Label="Tax Number" Required="true" RequiredError="Tax Number is required!"/>
                <MudTextField @bind-Value="model.PhoneNumber" For="@(() => model.PhoneNumber)" T="string" Label="PhoneNumber" Required="false" />
                <MudTextField @bind-Value="model.Website" For="@(() => model.Website)" T="string" Label="Website" Required="false" />
                <MudTextField @bind-Value="model.Comments" For="@(() => model.Comments)" T="string" Label="Notes"  Lines="5"/>
                <MudSelect T="@BlazorShared.Models.ContactDto" Label="Primary Contact" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter" @bind-Value="model.PrimaryContact">
                     @foreach (var contact in model.Contacts)
                        {
                            <MudSelectItem Value="@contact">@contact.FullName</MudSelectItem>
                        }
                </MudSelect>
            </MudPaper>
        </MudItem>

        <MudItem xs="6">
            <MudPaper Class="mud-width-full py-8 pa-4">
                <h3>Address Details</h3>
                <BlazorComponents.Components.Address AddressModel="@model.PhysicalAddress"></BlazorComponents.Components.Address>
            </MudPaper>
        </MudItem>

     <MudItem xs="12">
        <MudPaper Class="pa-4">
            <MudText Typo="Typo.h6">Contacts</MudText>
            <MudTable Items="model.Contacts"  Hover="true"
              @bind-SelectedItem="SelectedContact" SortLabel="Sort By" CommitEditTooltip="Commit Edit"
              OnCommitEditClick="@(() => Snackbar.Add("Commit Edit Handler Invoked"))" @ref="_table"
                      IsEditRowSwitchingBlocked="true" Dense="true" Bordered="true">

                <HeaderContent>
                    <MudTh>Name</MudTh>
                    <MudTh>Designation</MudTh>
                    <MudTh>Phone Number</MudTh>
                    <MudTh>Email Address</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Full Name">@context.FullName</MudTd>
                    <MudTd DataLabel="Position">@context.Position</MudTd>
                    <MudTd DataLabel="Phone Number">@context.PhoneNumber</MudTd>
                    <MudTd DataLabel="Email Address">@context.EmailAddress</MudTd>
                </RowTemplate>
                <RowEditingTemplate>
                    <MudTd DataLabel="Full Name">
                        <MudTextField @bind-Value="@context.FullName" Required />
                    </MudTd>
                    <MudTd DataLabel="Position">
                        <MudTextField @bind-Value="@context.Position" Required />
                    </MudTd>
                    <MudTd DataLabel="Phone Number">
                        <MudTextField @bind-Value="@context.PhoneNumber" Required />
                    </MudTd>
                    <MudTd DataLabel="Email Address">
                        <MudTextField @bind-Value="@context.EmailAddress" Required />
                    </MudTd>
                </RowEditingTemplate>
            </MudTable>  
            <MudButton ButtonType="ButtonType.Button" @onclick="AddContact"> Add Contact</MudButton>
        </MudPaper>
    </MudItem>

     <MudItem xs="12">
         <MudPaper Class="pa-4 mt-4">
             <MudText Typo="Typo.h6">Questionaires</MudText>
             <MudTable Items="@model.SupplierQuestionaires" Dense="true" Hover="true"
                       @bind-SelectedItem="SelectedQuestionaire" SortLabel="Sort By" CommitEditTooltip="Commit Edit"
                       OnCommitEditClick="@(() => Snackbar.Add("Commit Edit Handler Invoked"))" @ref="_questionaireTable"
                       IsEditRowSwitchingBlocked="true">

                 <HeaderContent>
                     <MudTh>..</MudTh>
                     <MudTh>Name</MudTh>
                     <MudTh>Description</MudTh>
                     <MudTh>Status</MudTh>
                     <MudTh>Percentage Complete</MudTh>
                     <MudTh>SupplierUrl</MudTh>
                 </HeaderContent>
                 <RowTemplate>
                     <MudTd DataLabel="Id">

                         <MudMenu Label="..." Variant="Variant.Filled" DisableElevation="true" Size="Size.Small"
                                  Dense="true"
                                  EndIcon="@Icons.Filled.KeyboardArrowDown" IconColor="Color.Info">
                             <MudMenuItem OnClick="@(()=>ViewQuestionaire(context))">@ButtonText.EDIT</MudMenuItem>
                            </MudMenu>
                        </MudTd>
                        <MudTd DataLabel="Name">@context.Questionaire.Name</MudTd>
                        <MudTd DataLabel="Description">@context.Questionaire.Description</MudTd>
                        <MudTd DataLabel="Invitation Status">@context.InvitationStatus</MudTd>
                        <MudTd DataLabel="Invitation Status">@context.PercentageComplete</MudTd>
                        <MudTd DataLabel="Supplier Url"><a href="@NavigationManager.BaseUri/@context.Url">Questionaire Link</a></MudTd>
                    </RowTemplate>
                </MudTable>
         </MudPaper>
     </MudItem>


    <MudItem xs="12">
                <MudPaper Class="pa-4 mt-4">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@(()=>SendScorecards())">Send Outstanding Scorecards</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@(()=>Save())">Save</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" OnClick="@(()=>Cancel())" Class="mx-2">Cancel</MudButton>
        </MudPaper>
    </MudItem>

</MudGrid>




    @code {
    MudForm form = default!;
    private MudTable<BlazorShared.Models.ContactDto> _table = default!;
    private MudTable<BlazorShared.Models.SupplierQuestionaireDto> _questionaireTable = default!;
    //public SupplierCreateRequest model { get; set; } = new() {};

    public BlazorShared.Models.ContactDto SelectedContact { get; set; } = new();
    public BlazorShared.Models.SupplierQuestionaireDto SelectedQuestionaire { get; set; } = new();

    public SupplierDto model { get; set; } = new();

    [Inject]
    private NavigationManager _navigationManager { get; set; } = default!;

    [Parameter]
    public Guid? SupplierId { get; set; }


    protected override async Task OnParametersSetAsync()
    {
        if (SupplierId.HasValue)
            model = await _supplierService.Retrieve(SupplierId.Value);

    }

    private async Task ViewQuestionaire(SupplierQuestionaireDto questionModel)
    {

        // var parameters = new DialogParameters
        //     {
        //            { nameof(_QuestionFormDialog.model),questionModel },
        //     };
        // var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        // var dialog = DialogService.Show<_QuestionFormDialog>(string.Format("Edit Question"), parameters, options);
        // var state = await dialog.Result;
        // if (!state.Cancelled)
        // {
        //     questionModel = (QuestionDto)state.Data;
        //     // model.Questionaire.AddQuestion(questionModel);
        //     await _table.ReloadServerData();
        //     Snackbar.Add($"{ToastText.CREATESUCCESS}", MudBlazor.Severity.Info);
        // }
    }

    public async void AddContact()
    {
        var contactModel = new BlazorShared.Models.ContactDto();
        var parameters = new DialogParameters
            {
                   { nameof(_ContactFormDialog.model),contactModel },
            };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = DialogService.Show<_ContactFormDialog>(string.Format("Add Contact"), parameters, options);
        var state = await dialog.Result;
        if (!state.Cancelled)
        {
            model.Contacts.Add(contactModel);
            await  _table.ReloadServerData();
            Snackbar.Add($"{ToastText.CREATESUCCESS}", MudBlazor.Severity.Info);
        }
    }

    public void SendScorecards()
    {
        _supplierService.SendScorecards(model.Id);
    }

    public void Save()
    {
        //_supplierService.Create(model);
    }

    public void Cancel()
    {
        _navigationManager.NavigateTo("/suppliers");
    }

}
