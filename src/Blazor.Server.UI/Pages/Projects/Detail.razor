@page "/projects/{id:guid}"
@using BlazorShared.Models
@using BlazorShared.Services

@attribute [Authorize(Policy = Permissions.Products.View)]
@inject IProjectService _projectService
@inject IEventService _eventService

<h1> @model.ProjectName</h1>
<MudChip Color="Color.Success">@model.Status</MudChip>

<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
    <MudTabPanel Text="Settings and Overview">
        <MudGrid>
            @*TODO: define mudform that should be edit fields, for example:*@
            <MudItem xs="12">
                <h7> Project Id: @model.Id</h7>
            </MudItem>
            <MudItem xs="12">
                <MudTextField Label="ProjectCode" @bind-Value="model.ProjectCode" For="@(() => model.ProjectCode)" Required="true" RequiredError="name is required!"></MudTextField>
            </MudItem>
            <MudItem xs="12">
                <MudTextField Label="ProjectName" @bind-Value="model.ProjectName" For="@(() => model.ProjectName)" Required="true" RequiredError="name is required!"></MudTextField>
            </MudItem>
            <MudItem xs="12">
                <MudTextField Label="Description" Lines="3" For="@(() => model.Description)" @bind-Value="model.Description"></MudTextField>
            </MudItem>

         </MudGrid>
    </MudTabPanel>
    <MudTabPanel Text="Events">
       
            <MudTable Items="model.Events" Dense="true" Hover="true"
                      @bind-SelectedItem="SelectedEvent" SortLabel="Sort By" CommitEditTooltip="Commit Edit"
                      OnCommitEditClick="@(() => Snackbar.Add("Commit Edit Handler Invoked"))" @ref="_table"
                      IsEditRowSwitchingBlocked="true">

                <HeaderContent>
                        <MudTh>...</MudTh>
                        <MudTh>ID</MudTh>
                        <MudTh>Event</MudTh>
                        <MudTh>Type</MudTh>
                        <MudTh>Status</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Actions">
                            <MudIconButton Icon="fa-solid fa-eye" Color="Color.Error" OnClick="@(()=>OnView(context))"></MudIconButton>
                        </MudTd>
                        <MudTd DataLabel="Id">@context.Id</MudTd>
                        <MudTd DataLabel="Event">@context.EventName</MudTd>
                        <MudTd DataLabel="Event Type">@context.EventType</MudTd>
                        <MudTd DataLabel="Event Status"> <MudChip Variant="Variant.Text" Color="context.EventStatus==EventStatus.Draft? Color.Default:context.EventStatus==EventStatus.Active?Color.Success: Color.Info">@context.EventStatus</MudChip></MudTd>
                    </RowTemplate>
                    <RowEditingTemplate>
                        <MudTd DataLabel="Id">
                            <MudTextField @bind-Value="@context.Id" Required />
                     </MudTd>
                     <MudTd DataLabel="Event">
                         <MudTextField @bind-Value="@context.EventName" Required />
                     </MudTd>
                     <MudTd DataLabel="Event Type">
                         <MudTextField @bind-Value="@context.EventType" Required />
                     </MudTd>
                 </RowEditingTemplate>
             </MudTable>
             <MudButton ButtonType="ButtonType.Button" @onclick="AddEvent"> Add Event</MudButton>
             <MudMenu Label="Add Event">
                 <MudMenuItem OnClick="AddEvent">RFI</MudMenuItem>
                 <MudMenuItem OnClick="AddEvent">RFQ</MudMenuItem>
             </MudMenu>
  
    </MudTabPanel>

</MudTabs>







@code {


    [Inject]
    private NavigationManager _navigationManager { get; set; } = default!;

    [Parameter]
    public Guid? Id { get; set; }





    private MudTable<BlazorShared.Models.EventDto> _table = default!;
    MudForm form = default!;

    public ProjectDto model { get; set; } = default!;



    private EventDto? _supplier= new();
    private EventDto SelectedEvent = new();

    protected override async Task OnParametersSetAsync()
    {



    }

    private async Task OnView(EventDto context)
    {
        if (context != null)
        {
            _navigationManager.NavigateTo($"/events/edit/{context.Id}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (Id.HasValue)
            model = await _projectService.Retrieve(Id.Value);
    }

    private void OnClick(MouseEventArgs args) 
    { 


    }
    public async void AddEvent()
    {
      

        _navigationManager.NavigateTo($"/events/add/{model.Id}");
    }


}
