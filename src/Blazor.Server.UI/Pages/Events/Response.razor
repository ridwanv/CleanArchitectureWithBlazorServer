@*@layout UnauthenticatedLayout*@
@page "/response/edit/{invitationId:guid}"

@using BlazorComponents.Components
@using BlazorShared.Models
@using BlazorShared.Services
@inject IEventService _eventService;



<MudPaper Class="d-flex justify-end flex-grow-1 gap-4" Elevation="0">
    <MudButtonGroup Color="Color.Secondary" Size="Size.Medium" Variant="Variant.Outlined" Class="justify-end">
        <MudButton @onclick="Submit">Submit Response</MudButton>
    </MudButtonGroup>
</MudPaper>

<h1> Questionaire</h1>
<h7> Questionaire Id: @_questionaire.Id</h7>
@*<MudChip Variant="Variant.Text" Color="Color.Info">@String.Format("{0:%d} days {0:%h} hours {0:%m} minutes {0:%s} seconds",timeLeft)</MudChip>
*@


<MudGrid>
    <MudItem xs="12" lg="12">
    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
            @foreach (var questionSection in _questionaire.Sections)
            {
                <MudTabPanel Text="@questionSection.SectionName">
                         <MudItem xs="12">
                            
                        @foreach (var item in questionSection.Questions)
                        {             
                            <MudCard>
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.h6">@item.QuestionLabel</MudText>
                                    </CardHeaderContent>
                                    <CardHeaderActions>
                                        <MudIconButton Icon="@Icons.Material.Filled.Info" Color="Color.Default" />
                                    </CardHeaderActions>
                                </MudCardHeader>

                                <QuestionAnswer Question="Self Assessment" AnswerType="@item.AnswerType"> </QuestionAnswer>
                             </MudCard>


       
                        }
                         </MudItem>
                  </MudTabPanel>
            }
    </MudTabs>

    </MudItem>
</MudGrid>


@code {

    [Parameter]
    public Guid InvitationId { get; set; }

    [Parameter]
    public bool IsInternalAssessment { get; set; }

    //https://stackoverflow.com/questions/61845181/how-to-use-bind-value-in-a-dynamic-form
    //https://github.com/lucianbumb/BlazorDynamicForm/blob/master/BlazorDynamicForm/Pages/DynamicField.razor
    BlazorShared.Models.QuestionaireDto _questionaire = new BlazorShared.Models.QuestionaireDto();

    List<BlazorShared.Models.QuestionaireDto> Questionaires = new List<BlazorShared.Models.QuestionaireDto>();

    private BlazorShared.Models.QuestionaireDto Questionaire = new BlazorShared.Models.QuestionaireDto();

    void OnValueChanged(object e, string prop)
    {

    }

    protected async override Task OnInitializedAsync()
    {
        var invitation = await _eventService.GetInvitation(InvitationId);
        _questionaire = invitation.Questionaire;
        //Questionaires = await questionaireService.Search(new QuestionaireSearchRequest());
        //_questionaire = Questionaires.FirstOrDefault();
    }

    public async void   Submit()
    {

        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Are you sure you want to submit the response? The buyer will be notified by email of your bid. If you need to make any changes you can retract your bid before End time and edit it.");
        parameters.Add("ButtonText", "Yes");
        parameters.Add("Color", Color.Success);

        var dialogResult = DialogService.Show<GenericDialog>("Confirm", parameters);
        var result = await dialogResult.Result;
        if (!result.Cancelled)
        {
            try
            {
                await _eventService.SubmitResponse(InvitationId,_questionaire);

            }
            catch (Exception ex)
            {
                Snackbar.Add($"{ex}", MudBlazor.Severity.Error);
            }

        }


        

    }
}
