
@page "/response/compare/{eventId:guid}"
@using BlazorComponents.Components
@using BlazorShared.Models
@using BlazorShared.Services
@inject IEventService _eventService;







@*<MudChip Variant="Variant.Text" Color="Color.Info">@String.Format("{0:%d} days {0:%h} hours {0:%m} minutes {0:%s} seconds",timeLeft)</MudChip>
*@

<MudGrid>
    <MudItem xs="12">
        <MudPaper Class="pa-4">
            <h3>Responses</h3>
            <MudTable Items="@model.Questionaire.Questions" Dense="true" Hover="true"
                       SortLabel="Sort By">

                <HeaderContent>
                    <MudTh>Category </MudTh>
                    <MudTh>Question </MudTh>
                    @foreach (var item in model.Invitations)
                    {
                        <MudTh>
                                    @item.Supplier.Name
                        </MudTh>
                    }

                </HeaderContent>
                <RowTemplate>

                        <MudTd DataLabel="Category">@context.Category</MudTd>
                        <MudTd DataLabel="Question">@context.QuestionLabel</MudTd>
                    @foreach (var item in model.Invitations)
                    {
                        <MudTd>
                            @if (item.Questionaire.Questions.FirstOrDefault(c => c.Id == context.Id) != null)
                                @item.Questionaire.Questions.FirstOrDefault(x => x.Id == context.Id).AnswerType.ToString()



                           
                        </MudTd>
                    }


                </RowTemplate>
            </MudTable>

        </MudPaper>
    </MudItem>


</MudGrid>


@code {

    [Parameter]
    public Guid EventId { get; set; }



    BlazorShared.Models.EventDto model = new BlazorShared.Models.EventDto();



    void OnValueChanged(object e, string prop)
    {

    }

    protected async override Task OnInitializedAsync()
    {
        model = await _eventService.Retrieve(EventId);
    }


}
